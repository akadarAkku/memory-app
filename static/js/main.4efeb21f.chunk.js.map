{"version":3,"sources":["components/Card/index.js","components/Board/index.js","components/Navbar/Navbar.js","deck.js","index.js","App.jsx"],"names":["Card","handleClick","id","type","flipped","solved","height","width","disabled","className","style","onClick","src","alt","Board","dimension","cards","map","card","key","includes","Navbar","props","newGame","wins","losses","score","wrongGuesses","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","ReactDOM","render","useState","setCards","setFlipped","setDimension","setSolved","setDisabled","setScore","setWins","setWrongGuesses","setLosses","useEffect","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","checkScore","noMatch","callback","newGuesses","updateGuesses","checkGuesses","setTimeout","resetCards","Image","sameCardClicked","isMatch","clickedCard","find","min","document","documentElement","clientWidth","clientHeight","textAlign","newScore","updateScore","getElementById"],"mappings":"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","file":"static/js/main.4efeb21f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './styles.css';\r\n\r\nexport default function Card({ \r\n    handleClick, \r\n    id, \r\n    type, \r\n    flipped, \r\n    solved,\r\n    height, \r\n    width, \r\n    disabled\r\n}) {\r\n    return <div\r\n        className={`flip-container ${flipped ? 'flipped' : ''}`}\r\n        style={{\r\n            width, height\r\n        }}\r\n        onClick={()=> disabled ? null : handleClick(id)}\r\n        >\r\n        <div className=\"flipper\">\r\n            <img\r\n                style={{\r\n                    height, width\r\n                }}\r\n                className={flipped ? 'front' : 'back'}\r\n                src={flipped || solved ? `./img/${type}.png` : './img/back.png'}\r\n                alt={type}\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nCard.propTypes = {\r\n    handleClick: PropTypes.func.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n    flipped: PropTypes.bool.isRequired,\r\n    solved: PropTypes.bool.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    width: PropTypes.number.isRequired, \r\n    disabled: PropTypes.bool.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Card from '../Card';\r\n\r\nimport './styles.css';\r\n\r\nexport default function Board({ disabled, dimension, cards, flipped, solved, handleClick }) {\r\n    return (\r\n        <div className=\"board\"\r\n              style={{\r\n                  width: dimension,\r\n                  height: dimension\r\n              }}>\r\n            {cards.map((card) => (\r\n                <Card \r\n                    key={card.id}    \r\n                    id={card.id}\r\n                    type={card.type}\r\n                    width={dimension/4.5}\r\n                    height={dimension/4.5}\r\n                    flipped={flipped.includes(card.id)}\r\n                    solved={solved.includes(card.id)}\r\n                    handleClick={handleClick}\r\n                    disabled={disabled || solved.includes(card.id)}\r\n                    {...card}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nBoard.propTypes = {\r\n    disabled: PropTypes.bool.isRequired,\r\n    dimension: PropTypes.number.isRequired,\r\n    cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    handleClick: PropTypes.func.isRequired\r\n}","import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = props => (\r\n  <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div>\r\n  <ul className=\"navbar-nav\">\r\n  <li className=\"instruction\">\r\n      <div className=\"myname\">Akader | React-week2-Memory Game</div>\r\n    <div className=\"instruction\">Can you remember where the cards are?</div>\r\n    </li>\r\n    <li className=\"nav-item\">\r\n      <div className=\"restart\" onClick={() => props.newGame()}>\r\n        Restart Game\r\n      </div>\r\n    </li>\r\n    <li className=\"nav-item\">\r\n      \r\n          <div className=\"wins\">Wins: {props.wins} </div>         \r\n          <div className=\"losses\">Losses: {props.losses} </div>\r\n          \r\n        </li>\r\n        <li className=\"nav-item\">\r\n            <div className=\"score\">Current Score: {props.score}/8</div>\r\n\r\n            <div className=\"wrongGuesses\">Incorrect Guesses: {props.wrongGuesses}/8</div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;","function shuffle(array) {\r\n    const _array = array.slice(0);\r\n    for (var i=0; i<_array.length-1; i++) {\r\n        var randomIndex = Math.floor(Math.random() * (i+1));\r\n        var temp = _array[i];\r\n        _array[i] = _array[randomIndex];\r\n        _array[randomIndex] = temp;\r\n    }\r\n    return _array;\r\n}\r\n\r\nexport default function initializeDeck() {\r\n    let id = 0;\r\n    const cards= ['react', 'reactu', 'redux', 'vue', \r\n    'angular', 'javascript', 'ruby', 'rails'].reduce((acc, type) => {\r\n        acc.push({\r\n            id: id++,\r\n            type\r\n        })\r\n        acc.push({\r\n            id: id++,\r\n            type\r\n        })\r\n        return acc\r\n    }, [])\r\n    return shuffle(cards);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","import React, { useState, useEffect } from 'react'\r\nimport Board from './components/Board';\r\nimport Navbar from './components/Navbar';\r\n\r\nimport initializeDeck from './deck';\r\n\r\nexport default function App() {\r\n  const [cards, setCards] = useState([])\r\n  const [flipped, setFlipped] = useState([])\r\n  const [dimension, setDimension] = useState(400);\r\n  const [solved, setSolved] = useState([]);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [wins, setWins] = useState(0);\r\n  const [wrongGuesses, setWrongGuesses] = useState(0);\r\n  const [losses, setLosses] = useState(0);\r\n\r\n  useEffect(() => {\r\n    resizeBoard()\r\n    setCards(initializeDeck())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    preloadImages()\r\n  }, cards);\r\n\r\n  useEffect(() => {\r\n    const resizeListener = window.addEventListener('resize', resizeBoard)\r\n    return () => window.removeEventListener('resize', resizeListener)\r\n  })\r\n\r\n  useEffect(() => {\r\n    checkScore();\r\n  }, [score]); // Only re-run the effect if count changes\r\n\r\n  const handleClick = (id) => {\r\n    setDisabled(true);\r\n    if (flipped.length === 0) {\r\n      setFlipped([id])\r\n      setDisabled(false)\r\n    }\r\n    else {\r\n      if (sameCardClicked(id)) return\r\n      setFlipped([flipped[0],id])\r\n      if (isMatch(id)) {\r\n        setSolved([...solved, flipped[0], id]);\r\n        resetCards();\r\n        updateScore(score, checkScore);\r\n      } else {\r\n        noMatch();\r\n      }\r\n    }\r\n  }\r\n\r\n  const noMatch = () => {\r\n    updateGuesses(wrongGuesses, checkGuesses);\r\n    setTimeout(resetCards, 2000);\r\n  }\r\n\r\n  function updateScore(score, callback) {\r\n    var newScore = score + 1;\r\n    setScore(score + 1);\r\n    callback(newScore);\r\n  }\r\n\r\n  function updateGuesses(wrongGuesses, callback) {\r\n    var newGuesses = wrongGuesses + 1;\r\n    setWrongGuesses(wrongGuesses + 1);\r\n    callback(newGuesses);\r\n  }\r\n\r\n  const checkScore = (score) => {\r\n    if (score>7) {\r\n      setWins(wins + 1);\r\n      setTimeout(newGame, 1000);\r\n    }\r\n  }\r\n\r\n  const checkGuesses = (wrongGuesses) => {\r\n    if (wrongGuesses>7) {\r\n      setLosses(losses + 1);\r\n      setTimeout(newGame, 2000);\r\n    }\r\n  }\r\n\r\n  const newGame = () => {\r\n    setSolved([]);\r\n    setCards(initializeDeck());\r\n    setWrongGuesses(0);\r\n    setScore(0);\r\n  }\r\n\r\n  const preloadImages = () => \r\n    cards.map((card) => {\r\n      const src = `/img/${card.type}.png`;\r\n      new Image().src = src;\r\n    })\r\n  \r\n\r\n  const resetCards = () => {\r\n    setFlipped([]);\r\n    setDisabled(false);\r\n  }\r\n\r\n  const sameCardClicked = (id) => flipped.includes(id);\r\n\r\n  const isMatch = (id) => {\r\n    const clickedCard = cards.find((card)=> card.id ===id);\r\n    const flippedCard = cards.find((card) => flipped[0]===card.id);\r\n    return flippedCard.type ===clickedCard.type;\r\n  }\r\n\r\n  const resizeBoard = () => {\r\n    setDimension(Math.min(\r\n      document.documentElement.clientWidth,\r\n      document.documentElement.clientHeight\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className=\"app\"\r\n      style={{\r\n        textAlign: \"center\"\r\n      }}\r\n    >\r\n      <Navbar \r\n        wins={wins}\r\n        losses={losses}\r\n        score={score}\r\n        wrongGuesses={wrongGuesses}\r\n        newGame={newGame}\r\n      />\r\n      <Board \r\n        dimension={dimension}\r\n        cards={cards}\r\n        flipped={flipped}\r\n        handleClick={handleClick}\r\n        disabled={disabled}\r\n        solved={solved}\r\n      />\r\n    </div>\r\n  )\r\n}"],"sourceRoot":""}